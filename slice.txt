值拷贝
引用

切片
很轻量的操作，但是表达很灵活。
切片可以对 数组、切片、切片的切片 来切。

python的切片是指针数组。
python的切片如下图所示: 对a进行切片，切片的每个元素都类似于一个软连。
├── a
│?? ├── 0
│?? ├── 1
│?? ├── 2
│?? ├── 3
│?? ├── 4
│?? └── 5
└── b
    ├── 0 -> ../a/0
    ├── 1 -> ../a/1
    ├── 2 -> ../a/2
    ├── 3 -> ../a/3
    ├── 4 -> ../a/4
    └── 5 -> ../a/5
	
go的切片如下
对a进行切片，切片b只需要记录原始变量和起始及结束位置就可以了，剩下的就可以推算出来，因为数组是连续的内存地址。
$ tree 
.
├── a
│?? ├── 0
│?? ├── 1
│?? ├── 2
│?? ├── 3
│?? ├── 4
│?? └── 5
└── b
    └── s
$ cat b/s 
a	
2-3


1. 首先申请同样大小的内存空间；


# 引用
记录数据的地址以及数据切分的位置；
引用类似于软连接。
指向同一块内存
只是做了一个标记，并没有申请内存，
切片也要占用内存，切片存储了原始数组的地址以及要切的起始位置和结束位置。占用内存很小。
共享一块内存的，引用同一块内存的
最本质的问题 引用了同一块内存地址。

切片可以理解成对数组某部分的引用。

因为数组的内存地址是连续的，但不一定是+1的关系。

# 值拷贝




数组不能变长、但是切片可以变长。
切片可以理解成一个动态数组。 

cap是一种优化方式，在不超过容量的情况下，扩容切片不会引起新的内存分配的。

